// 2. Ожидание потока
//////Модифицируйте программу упр. 1 так, чтобы вывод родительского потока
//////производился после завершения дочернего.Используйте pthread_join.

#define HAVE_STRUCT_TIMESPEC
#include <iostream>
#include <thread>
#include <pthread.h>
#include <vector>
#include <chrono>

// Функция, которая будет выполняться в дочернем потоке
void* printText(void* arg) {
    std::string threadName = *reinterpret_cast<std::string*>(arg);
    for (int i = 0; i < 5; i++) {
        std::cout << threadName << ": String #" << i + 1 << std::endl;
    }
    return nullptr;
}

int main() {
    // Имя для дочернего потока
    std::string threadName = "2-nd thread";
    pthread_t thread;

    // Создание дочернего потока
    pthread_create(&thread, nullptr, printText, &threadName);

    // Ожидание завершения дочернего потока
    pthread_join(thread, nullptr);

    // Вывод родительского потока после завершения дочернего
    printText((void*)new std::string("main"));

    return 0;
}
