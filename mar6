////////////6

//////6. Sleepsort
//////Реализуйте уникальный алгоритм сортировки sleepsort с асимптотикой O(N) (по процессорному времени).
//////На стандартный вход программы подается не более 100 строк различной длины.Вам необходимо вывести 
//////эти строки, отсортированные по длине.Строки одинаковой длины могут выводиться в произвольном порядке.
//////Для каждой входной строки, создайте поток и передайте ей эту строку в качестве параметра.
//////Поток должна вызвать sleep(2) или usleep(2) с параметром, пропорциональным длине этой строки.
//////Затем поток выводит строку в стандартный поток вывода и завершается.
//////Не следует выбирать коэффициент пропорциональности слишком маленьким, вы рискуете получить некорректную сортировку.

#define HAVE_STRUCT_TIMESPEC
#include <iostream>
#include <string>
#include <vector>
#include <thread>
#include <chrono>

void sleepSort(const std::string& str) {
    std::this_thread::sleep_for(std::chrono::milliseconds(str.length() * 100));
    std::cout << str << std::endl;
}

int main() {
    std::vector<std::string> strings;
    std::string input;

    // Чтение строк с входа
    while (true) {
        std::getline(std::cin, input);
        if (input.empty()) {
            break;
        }
        strings.push_back(input);
    }

    // Создание потоков для каждой строки
    std::vector<std::thread> threads;
    for (const auto& str : strings) {
        threads.emplace_back(sleepSort, str);
    }

    // Ожидание завершения всех потоков
    for (auto& thread : threads) {
        thread.join();
    }

    return 0;
}
