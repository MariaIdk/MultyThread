//////7. Многопоточный cp - R
//////Реализуйте многопоточную программу рекурсивного копирования дерева подкаталогов,
//////функциональный аналог команды cp(1) с ключом - R.Программа должна принимать 
//////два параметра – полное путевое имя корневого каталога исходного дерева и 
//////полное путевое имя целевого дерева.Программа должна обходить исходное дерево каталогов
//////при помощи opendir(3c) / readdir_r(3с) и определять тип каждого найденного файла 
//////при помощи stat(2).Для определения размера буфера 
//////для readdir_r используйте pathconf(2) (sizeof(struct dirent) + pathconf(directory) + 1).


#include <iostream>
#include <vector>
#include <string>
#include <thread>
#include <fstream>
#include <filesystem>
#include <future>
using namespace std;

namespace fs = std::filesystem;

// Функция для копирования файла
void copyFile(const string& src, const string& dst) {
    ifstream in(src, ios::binary);
    ofstream out(dst, ios::binary);
    out << in.rdbuf();
}

// Функция для рекурсивного копирования директории
void copyDir(const string& src, const string& dst) {
    // Создание новой директории в пункте назначения
    std::filesystem::create_directory(dst);

    std::vector<std::filesystem::path> files, directories;

    // Получение списка файлов и директорий в исходной директории
    for (const auto& entry : std::filesystem::directory_iterator(src)) {
        if (std::filesystem::is_regular_file(entry)) {
            files.push_back(entry.path());
        }
        else if (std::filesystem::is_directory(entry)) {
            directories.push_back(entry.path());
        }
    }

    std::vector<std::future<void>> fileFutures, dirFutures;

    // Запуск копирования файлов асинхронно
    for (const auto& file : files) {
        string newSrc = file.string();
        string newDst = dst + "/" + file.filename().string();
        fileFutures.push_back(async(launch::async, copyFile, newSrc, newDst));
    }

    // Запуск копирования директорий асинхронно
    for (const auto& directory : directories) {
        string newSrc = directory.string();
        string newDst = dst + "/" + directory.filename().string();
        dirFutures.push_back(async(launch::async, copyDir, newSrc, newDst));
    }

    // Дожидаемся завершения всех операций копирования
    for (auto& future : fileFutures) {
        future.get();
    }
    for (auto& future : dirFutures) {
        future.get();
    }
}

int main() {
    // Начало программы
    cout << "Copying...\n";

    // Пути исходной и целевой директорий
    string src = "C:/Users/Мария/Desktop/6-th semester/Новая папка";
    string dst = "C:/Users/Мария/Desktop/6-th semester/Новая папка2";

    // Создание потока для копирования директории
    thread t(copyDir, src, dst);
    t.join(); // Ожидание завершения потока

    // Конец программы
    cout << "\nFiles copied!";

    return 0;
}
